#include <bits/stdc++.h>
using namespace std;
void floydWarshall(vector<vector<int>>& graph,vector<vector<int>>& dist)
{
    int V = 26;
    int  i, j, k;
    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];
    for (k = 0; k < V; k++) {
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++) {
                if (dist[i][j] > (dist[i][k] + dist[k][j])
                    && (dist[k][j] != INT_MAX
                        && dist[i][k] != INT_MAX))
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
   return;
}
int main() {
    int t;
    cin>>t;
    for(int j =1;j<=t;j++){
    string s;
    cin>>s;
    int edges;
    cin>>edges;
    vector<vector<int>> graph(26,vector<int>(26,INT_MAX));
    for(int i =0;i<edges;i++){
        string a;
        cin>>a;
       // cout<<a[0]<<" "<<a[1]<<" ";
        graph[a[0]-'A'][a[1]-'A']=1;
    }
    vector<vector<int>> distance = graph;
    // for(int i =0;i<26;i++){
    //     for(int j=0;j<26;j++) cout<<graph[i][j]<<" ";
    //     cout<<endl;
    // }
    floydWarshall(graph,distance);
    
    int ans = INT_MAX;
    for(int i =0;i<26;i++){
        int cost = 0;
        for(int j = 0;j<s.length();j++){
            if(s[j]-'A'==i) continue;
            else {
                if(distance[s[j]-'A'][i]==INT_MAX){
                    cost=INT_MAX;
                    break;
                }
                else cost+=distance[s[j]-'A'][i];
            }
        }
        ans = min(ans,cost);
    }
    if(ans==INT_MAX) cout<<"Case #"<<j<<": "<<-1<<endl;
    else cout<<"Case #"<<j<<": "<<ans<<endl;
    
}
return 0;
}
